---
apiVersion: v1
kind: Template
metadata:
  name: ccx-data-pipeline
objects:

- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: ccx-data-pipeline
  spec:
    envName: ${ENV_NAME}
    deployments:
      - name: archives-handler
        minReplicas: ${{MIN_REPLICAS}}
        webServices:
          public:
            enabled: false
          private:
            enabled: false
          metrics:
            enabled: true
        podSpec:
          env:
            - name: CONFIG_PATH
              value: /data/config.yaml
            - name: CDP_INCOMING_TOPIC
              value: platform.upload.buckit
            - name: CDP_GROUP_ID
              value: ccx_data_pipeline_app
            - name: CDP_CONSUMER_SERVER
              value: ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
            - name: CDP_OUTGOING_TOPIC
              value: ccx.ocp.results
            - name: CDP_PUBLISHER_SERVER
              value: ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
            - name: LOGGING_TO_CW_ENABLED
              value: "False"
            - name: PAYLOAD_TRACKER_TOPIC
              value: platform.payload-status
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  key: SENTRY_DSN
                  name: sentry-dsn
                  optional: true
            - name: SENTRY_CATCH_WARNINGS
              value: '1'
          image: ${IMAGE}:${IMAGE_TAG}
          volumeMounts:
            - mountPath: /data
              name: ccx-data-pipeline-config
          volumes:
            - configMap:
                name: ccx-data-pipeline-config-map
              name: ccx-data-pipeline-config
          resources:
            requests:
              cpu: 100m
              memory: 300Mi
            limits:
              cpu: 250m
              memory: 600Mi
    kafkaTopics:
      - replicas: 3
        partitions: 16
        topicName: platform.upload.buckit
      - replicas: 3
        partitions: 1
        topicName: ccx.ocp.results

- kind: ConfigMap
  apiVersion: v1
  metadata:
    labels:
      app: ccx-data-pipeline
    name: ccx-data-pipeline-config-map
  data:
    config.yaml: |-
      plugins:
        packages:
          - insights.specs.default
          - ccx_data_pipeline
          - ccx_rules_ocp.external
          - pythonjsonlogger
          - pythonjsonlogger.jsonlogger
        configs:
          - name: ccx_ocp_core.config.telemeter.TelemeterServiceConfig
            enabled: false
      service:
        extract_timeout:
        extract_tmp_dir:
        format: insights.formats._json.JsonFormat
        target_components: []
        consumer:
          name: ccx_data_pipeline.consumer.Consumer
          kwargs:
            incoming_topic: $CDP_INCOMING_TOPIC
            group_id: $CDP_GROUP_ID
            bootstrap_servers: $CDP_CONSUMER_SERVER
            max_poll_records: 10
            max_poll_interval_ms: 600000

        downloader:
          name: ccx_data_pipeline.http_downloader.HTTPDownloader

        publisher:
          name: ccx_data_pipeline.kafka_publisher.KafkaPublisher
          kwargs:
            outgoing_topic: $CDP_OUTGOING_TOPIC
            bootstrap_servers: $CDP_PUBLISHER_SERVER
        watchers:
          - name: ccx_data_pipeline.watchers.stats_watcher.StatsWatcher
          - name: ccx_data_pipeline.watchers.cluster_id_watcher.ClusterIdWatcher
          - name: ccx_data_pipeline.watchers.payload_tracker_watcher.PayloadTrackerWatcher
            kwargs:
              bootstrap_servers: $CDP_PUBLISHER_SERVER
              topic: $PAYLOAD_TRACKER_TOPIC

        logging:
          version: 1
          disable_existing_loggers: false
          handlers:
            default:
              level: DEBUG
              class: logging.StreamHandler
              stream: ext://sys.stdout
              formatter: json
          formatters:
            brief:
              format: "%(asctime)s %(levelname)s - %(filename)s:%(lineno)d - %(message)s"
            json:
              (): "pythonjsonlogger.jsonlogger.JsonFormatter"
              format: "%(filename)s %(lineno)d %(process)d %(levelname)s %(asctime)s %(name)s %(message)s"
            cloudwatch:
              format: "%(filename)s %(levelname)s %(asctime)s %(name)s %(hostname)s %(mac_address)s %(message)s"

          root:
            handlers:
              - default
          loggers:
            insights_messaging:
              level: DEBUG
            insights:
              level: WARNING
            ccx_data_pipeline:
              level: DEBUG

parameters:
- description: Image name
  name: IMAGE
  value: quay.io/cloudservices/ccx-data-pipeline
- description: Image tag
  name: IMAGE_TAG
  required: true
- description: Determines Clowder deployment
  name: CLOWDER_ENABLED
  value: "true"
- description: ClowdEnv Name
  name: ENV_NAME
  requred: true
- description: Minimum number of pods to use when autoscaling is enabled
  name: MIN_REPLICAS
  value: '2'
